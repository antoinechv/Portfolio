name: Deploy to GitHub Pages

on:
  push:
    branches:
      - production  # Déclenche ce workflow quand tu pousses sur 'production'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Utilise une machine virtuelle Ubuntu

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3  # Récupère ton dépôt

      - name: Set up Node.js
        uses: actions/setup-node@v3

      - name: Install dependencies
        run: npm install  # Installe les dépendances

      - name: Build the project
        run: npm run build  # Exécute la commande pour générer les fichiers de production (assume que tu utilises `npm run build` pour Astro)

      - name: Clean up repository before moving dist files
        run: |
          # Supprime tous les fichiers du dépôt sauf .git et autres répertoires nécessaires
          find . -not -path './.git*' -exec rm -rf {} \;  # Supprime tous les fichiers sauf .git et les répertoires nécessaires

      - name: Checkout deploy branch
        run: |
          git fetch origin  # Récupère les informations des branches distantes
          git checkout deploy || git checkout --orphan deploy  # Si la branche 'deploy' n'existe pas, elle sera créée

      - name: Clean deploy branch (remove all files in deploy branch)
        run: |
          # Supprime tous les fichiers dans la branche deploy
          git rm -rf .  # Supprime tous les fichiers de la branche deploy (sauf .git)
          git commit -m "Clean deploy branch"

      - name: Copy dist files to the root of deploy branch
        run: |
          # Copie le contenu du dossier 'dist' à la racine
          cp -r dist/* ./
          rm -rf dist  # Supprime le dossier 'dist' après avoir déplacé ses fichiers

      - name: Commit and push changes to deploy branch
        run: |
          git add .
          git commit -m "Deploy build to deploy branch"
          git push origin deploy --force  # Pousse les changements sur la branche 'deploy'
